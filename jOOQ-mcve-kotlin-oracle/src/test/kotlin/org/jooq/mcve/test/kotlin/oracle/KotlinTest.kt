package org.jooq.mcve.test.kotlin.oracle

import org.jooq.DSLContext
import org.jooq.SQLDialect
import org.jooq.impl.DSL
import org.jooq.mcve.kotlin.oracle.tables.references.TEST
import org.jooq.tools.JooqLogger
import org.junit.*
import org.junit.Assert.assertEquals
import org.junit.Assert.assertNotNull
import org.testcontainers.containers.OracleContainer
import org.testcontainers.containers.wait.strategy.HostPortWaitStrategy
import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy
import org.testcontainers.containers.wait.strategy.WaitAllStrategy
import org.testcontainers.utility.DockerImageName
import org.testcontainers.utility.ResourceReaper
import java.sql.Connection
import java.sql.DriverManager
import java.time.Duration

class KotlinTest {
    companion object {
        var log: JooqLogger = JooqLogger.getLogger(KotlinTest::class.java)
        var db: OracleContainer? = null
        var connection: Connection? = null
        var ctx: DSLContext? = null

        @BeforeClass
        @JvmStatic
        fun init() {
            if (System.getProperty("jooq.codegen.jdbc.url") == null) {
                db = object : OracleContainer(
                    DockerImageName.parse("gvenzl/oracle-free").asCompatibleSubstituteFor("gvenzl/oracle-xe")
                ) {
                    override fun getSid() = "FREEPDB1"
                    override fun getDatabaseName() = "FREEPDB1"
                }
                    .withUsername("MCVE")
                    .withPassword("MCVE")
                    .withEnv("ORACLE_PASSWORD", "MCVE")
                    .withEnv("APP_USER", "MCVE")
                    .withEnv("APP_USER_PASSWORD", "MCVE")
                    .waitingFor(WaitAllStrategy()
                        .withStrategy(LogMessageWaitStrategy()
                            .withRegEx(".*DATABASE IS READY TO USE!.*")
                        )
                        .withStrategy(HostPortWaitStrategy())
                        .withStartupTimeout(Duration.ofMinutes(5))
                    )
                    .withInitScript("db/migration/init.sql")

                db!!.start()
                System.setProperty("jooq.codegen.jdbc.url", db!!.jdbcUrl)
                System.setProperty("jooq.codegen.jdbc.username", db!!.username)
                System.setProperty("jooq.codegen.jdbc.password", db!!.password)
            }

            log.info("Connecting")
            connection = DriverManager.getConnection(
                System.getProperty("jooq.codegen.jdbc.url"),
                System.getProperty("jooq.codegen.jdbc.username"),
                System.getProperty("jooq.codegen.jdbc.password")
            )
            ctx = DSL.using(connection, SQLDialect.ORACLE)
            connection!!.createStatement().use { s -> log.info("Finished setup") }
        }

        @AfterClass
        @JvmStatic
        fun end() {
            if (db != null) {
                ResourceReaper.instance().stopAndRemoveContainer(db!!.containerId, db!!.dockerImageName)
            }
        }
    }

    @Before
    fun setup() {
        ctx().delete(TEST).execute()
    }

    @After
    fun after() {}

    fun ctx(): DSLContext = ctx!!

    @Test
    fun mcveTest() {
        assertEquals(1, ctx()
            .insertInto(TEST)
            .columns(TEST.CD)
            .values(42)
            .execute()
        )

        val record = ctx().fetchOne(TEST, TEST.CD.eq(42))
        assertNotNull(record?.id)
    }
}